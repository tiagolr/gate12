#pragma once

#include "dsp/Pattern.h"
#include <vector>
#include <string>
#include <sstream>

class Presets {
public:
	static std::vector<PPoint> getPreset(int index) {
		const auto& presets = getPresets();
		if (index < 0 || index >= static_cast<int>(presets.size()))
			return {};
		return parsePreset(presets[index]);
	}

private:
	static const std::vector<std::string>& getPresets() {
		static const std::vector<std::string> presets = {
			"", // 111 Empty
			"0 0 0 0 0.25 1 0 0 0.5 0 0 0 0.75 1 0 0"  // 112, "Gate 1/2"
			"0 0 0 0 0.125 1 0 0 0.25 0 0 0 0.375 1 0 0 0.5 0 0 0 0.625 1 0 0 0.75 0 0 0 0.875 1 0 0", // 113, "Gate 1/4"
			"0 0 0 0 0.0625 1 0 0 0.125 0 0 0 0.1875 1 0 0 0.25 0 0 0 0.3125 1 0 0 0.375 0 0 0 0.4375 1 0 0 0.5 0 0 0 0.5625 1 0 0 0.625 0 0 0 0.6875 1 0 0 0.75 0 0 0 0.8125 1 0 0 0.875 0 0 0 0.9375 1 0 0 ", // 114, "Gate 1/8"
			"0 0 0 0 0.0416667 1 0 0 0.0833333 0 0 0 0.125 1 0 0 0.166667 0 0 0 0.208333 1 0 0 0.25 0 0 0 0.291667 1 0 0 0.333333 0 0 0 0.375 1 0 0 0.416667 0 0 0 0.458333 1 0 0 0.5 0 0 0 0.541667 1 0 0 0.583333 0 0 0 0.625 1 0 0 0.666667 0 0 0 0.708333 1 0 0 0.75 0 0 0 0.791667 1 0 0 0.833333 0 0 0 0.875 1 0 0 0.916667 0 0 0 0.958333 1 0 0 ", // 116, "Gate 1/12"
			"0 0 0 0 0.03125 1 0 0 0.0625 0 0 0 0.09375 1 0 0 0.125 0 0 0 0.15625 1 0 0 0.1875 0 0 0 0.21875 1 0 0 0.25 0 0 0 0.28125 1 0 0 0.3125 0 0 0 0.34375 1 0 0 0.375 0 0 0 0.40625 1 0 0 0.4375 0 0 0 0.46875 1 0 0 0.5 0 0 0 0.53125 1 0 0 0.5625 0 0 0 0.59375 1 0 0 0.625 0 0 0 0.65625 1 0 0 0.6875 0 0 0 0.71875 1 0 0 0.75 0 0 0 0.78125 1 0 0 0.8125 0 0 0 0.84375 1 0 0 0.875 0 0 0 0.90625 1 0 0 0.9375 0 0 0 0.96875 1 0 0 ", // 115, "Gate 1/16"
			"0 0 0.496 3 1 1 0 1 1 1 0 0 ", // 117, "Gate 1/24"
			"0 0 0.572 3 1 1 0 1 1 1 0 0", // 118, "Gate 1/32"
			"0 0 0 0 0.03125 1 0 0 0.0625 0 0 0 0.09375 1 0 0 0.125 0 0 0 0.21875 1 0 0 0.25 0 0 0 0.28125 1 0 0 0.3125 0 0 0 0.34375 1 0 0 0.375 0 0 0 0.46875 1 0 0 0.5 0 0 0 0.53125 1 0 0 0.5625 0 0 0 0.59375 1 0 0 0.625 0 0 0 0.71875 1 0 0 0.75 0 0 0 0.78125 1 0 0 0.8125 0 0 0 0.84375 1 0 0 0.875 0 0 0 0.96875 1 0 0", // 119, "Trance 1"
			"0 0 0 0 0.03125 1 0 0 0.0625 0 0 0 0.09375 1 0 0 0.125 0 0 0 0.15625 1 0 0 0.1875 0 0 0 0.25 0 0 0 0.28125 1 0 0 0.3125 0 0 0 0.34375 1 0 0 0.375 0 0 0 0.40625 1 0 0 0.4375 0 0 0 0.46875 1 0 0 0.5 0 0 0 0.5625 0 0 0 0.59375 1 0 0 0.625 0 0 0 0.71875 1 0 0 0.75 0 0 0 0.78125 1 0 0 0.8125 0 0 0 0.84375 1 0 0 0.875 0 0 0 0.90625 1 0 0 0.9375 0 0 0 0.96875 1 0 0 ", // 120, "Trance 2"
			"0 0 0 0 0.03125 1 0 0 0.0625 0 0 0 0.125 0 0 0 0.15625 1 0 0 0.1875 0 0 0 0.21875 1 0 0 0.25 0 0 0 0.28125 1 0 0 0.3125 0 0 0 0.34375 1 0 0 0.375 0 0 0 0.4375 0 0 0 0.46875 1 0 0 0.5 0 0 0 0.53125 1 0 0 0.5625 0 0 0 0.578125 1 0 0 0.59375 0 0 0 0.609375 1 0 0 0.625 0 0 0 0.71875 1 0 0 0.75 0 0 0 0.78125 1 0 0 0.8125 0 0 0 0.84375 1 0 0 0.875 0 0 0 0.90625 1 0 0 0.9375 0 0 0 0.96875 1 0 0 ", // 121, "Trance 3"
			"0 0 0 0 0.03125 1 0 0 0.0625 0.75 0 0 0.078125 1 0 0 0.09375 0.25 0 0 0.109375 1 0 0 0.125 0 0 0 0.15625 1 0 0 0.1875 0.25 0 0 0.21875 1 0 0 0.25 0 0 0 0.34375 1 0 0 0.375 0.25 0 0 0.40625 1 0 0 0.4375 0 0 0 0.46875 1 0 0 0.5625 0.25 0 0 0.59375 1 0 0 0.625 0 0 0 0.65625 1 0 0 0.75 0 0 0 0.8125 1 0 0 0.875 0 0 0 0.890625 1 0 0 0.90625 0.25 0 0 0.921875 1 0 0 0.9375 0.5 0 0 0.953125 1 0 0 0.96875 0.75 0 0 0.984375 1 0 0 ", // 122, "Trance 4"

		    "", // 131, "Saw 1"
		    "", // 132, "Saw 2"
		    "", // 133, "1 Step"
		    "", // 134, "1 Step FadeIn"
		    "", // 135, "4 Step Gate"
		    "", // 136, "Off Beat"
		    "", // 137, "1/4 Dynamic"
		    "", // 138, "Swing"
		    "", // 139, "Gate Out"
		    "", // 140, "Gate In"
		    "", // 141, "Speed up"
		    "", // 142, "Speed Down"

			"", // 151, "End Fade"
			"", // 152, "End Gate"
			"", // 152, "Tremolo Slow"
			"", // 152, "Tremolo Fast"
			"", // 152, "Sidechain"
			"", // 152, "Drum Loop"
			"", // 152, "Copter"
			"", // 152, "AM"
			"", // 152, "Fade In"
			"", // 152, "Fade Out"
			"", // 152, "Fade OutIn"
			"", // 152, "Mute"
		};
		return presets;
	}

	static std::vector<PPoint> parsePreset(const std::string& str) {
		std::vector<PPoint> result;
		std::istringstream iss(str);
		double x, y, tension;
		int type;

		if (str.empty()) {
			return result;  // Return empty array if the string is empty
		}

		while (iss >> x >> y >> tension >> type) {
			result.emplace_back(PPoint{"", x, y, tension, type});
		}

		return result;
	}
};